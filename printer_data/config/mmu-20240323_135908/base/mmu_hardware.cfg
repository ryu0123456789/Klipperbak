## Happy Hare MMU hardware config file with config for EASY-BRD-RP2040
##
## Common external mcus:
## 1) EASY-BRD
##  J6 Jumper setting
##   Option 1: Pins 2-3 and 4-5, i.e.  .[..][..] (recommended)
##   This allows for option of "touch" selector setup. Note that this enables the option disables the "extra"
##   switch so the toolhead sensor (if used) would have to be connected to the main mcu
##
##   Option 2: Pins 1-2 and 4-5, i.e.  [..].[..]
##   It you don't care about selector touch operation. The "extra" switch is enabled for other uses
##
##  Note that the EASY-BRD does not expose the DIAG pin for the gear stepper
##
## 2) Fysetc Burrows ERB
##  No jumper configuration is required for Fysetc Burrows ERB board. Both Selector and Gear DIAG pins are exposed
##
##  ERB firmware flashing notes:
##   Must have 12v/24v supply connected
##    > make menuconfig (rpi2040, No bootloader)
##    > make
##  Put card in boot loader mode: Press & Hold 'BOOTSEL' ; click 'RST; ; Release 'BOOTSEL'
##    > make flash FLASH_DEVICE=2e8a:0003
##
## ------
##
## Note about "touch" endstops: Happy Hare provides extremely flexible homing options using both single steppers or synced steppers.
## The "touch" options leverage stallguard and thus require the appropriate 'diag_pin' and stallguard parameters set on the TMC driver
## section.  If you have the diag_pin exposed, it is harmless to define this because they will only be used when explicitly needed
## and configured.
##
## Touch option for each stepper provides these benefits / possibilities:
##  - on extruder stepper allows for the automatic detection of the nozzle!!
##  - on selector stepper allows for the automatic detection of filament stuck in the gate and subsequent recovery
##  - on gear stepper allows for the automatic detection of the extruder entrance
##
## These sound wonderful right?  They are, but there are caveats:
##  - The external EASY-BRD and ERB mcu's are terrible at detecting stallguard and often result in an "undervoltage error". It is generally
##    possible to get selector touch (TMC2209) tuned especially if you set 'stealthchop_threshold' to a value greater than homing speeds and
##    less than move speed. I.e. the stepper runs in stealthchop mode when homing. [klipper experts will know that it switches the chip mode
##    automatically to stealthchop and then back for Stallguard2 support, howver the automatic switching back to spreadcycle at the end homing
##    move seems to provoke the error condition and setting 'shealthchip_threshold' appropriately avoids this condition. More than you wanted
##    to know I'm sure!
##  - I have not had much luck with touch (stallguard) on the gear stepper with EASY-BRD and ERB mcu's and you really want the extra torque
##    of spreadcycle so adjusting 'stealthchop_threshold' is not really an option
##  - Enabling on the extruder stepper is viable but you will likley have to change jumpers on your main mcu to expose the DIAG pin for
##    whichever driver the extruder stepper is connected to.
##
## In summary, "touch" homing with your MMU is an advanced option that requires patience and careful tuning.  Luckily everything works with
## regular endstops and there are creative workaround options for certain homing points (like extruder entry) in the absence of any endstop.
## I'm really interested in creative setups that you come up with. Ping me on Discord (moggieuk#6538)
##
##
## See mmu.cfg for serial definition and pins aliaes
##

# HOMING CAPABLE EXTRUDER --------------------------------------------------------------------------------------------------
# With Happy Hare, it is important that the extruder stepper definition is moved here to allow for sophisticated homing and syncing
# options.  This definition replaces the stepper definition part of you existing [extruder] definition.

# IMPORTANT: Move the complete stepper driver configuration associated with regular [extruder] here and comment out the
# original driver config in your printer.cfg
#
# REMOVE/MOVE THIS SECTION vvv
#[tmc2209 manual_extruder_stepper extruder]
#uart_pin: EBBCan: PA15
#interpolate: true
#run_current: 0.5			# LDO 36STH20-1004AHG.  Match to macro below
#hold_current: 0.4
#sense_resistor: 0.110
#stealthchop_threshold: 0		# Spreadcycle (better for extruder)
#
# Uncomment two lines below if you have TMC and want the ability to use filament "touch" homing to nozzle
#diag_pin: E_DIAG			# Set to MCU pin connected to TMC DIAG pin for extruder
#driver_SGTHRS: 100			# 255 is most sensitive value, 0 is least sensitive

#HOMING CAPABLE EXTRUDER --------------------------------------------------------------------------------------------------
# With Happy Hare installed the extruder can be homed.  You will find the usual 'endstop' parameters can be added to your
# '[extruder]' section.  Useless you have some clever load cell attached to your nozzle it only really makes sense to configure 
# stallguard style "touch" homing. To do this add lines similar to this to your existing '[extruder]' definition whether
# you have it defined in printer.cfg.
#
#[extruder]
#endstop_pin: tmc2209_extruder:virtual_endstop
#
# Also be sure to add the appropriate stallguard config to the TMC section, e.g.
#
#[tmc2209 extruder]
#diag_pin: EBBCan: PB3			# Set to MCU pin connected to TMC DIAG pin for extruder
#driver_SGTHRS: 100			# 255 is most sensitive value, 0 is least sensitive
#
# Happy Hare will tak
[extruder]
step_pin: EBBCan: PD0
dir_pin: EBBCan: PD1
#dir_pin: !EBBCan: PD1
enable_pin: !EBBCan: PD2
gear_ratio: 50:17               #BMG Gear Ratio
microsteps: 16
full_steps_per_rotation: 400    #200 for 1.8 degree, 400 for 0.9 degree
rotation_distance: 26.6434053137 #33.500
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: EBBCan: PB13
sensor_type: Generic 3950 #EPCOS 100K B57560G104F
sensor_pin: EBBCan: PA3
min_extrude_temp: 0 #170


#control: pid
#pid_Kp = 16.621 
#pid_Ki = 1.086
#pid_Kd = 63.578
#pid_kp = 16.855
#pid_Ki = 0.960
#pid_Kd = 73.952
#pid_kp = 26.213
#pid_ki = 1.304
#pid_kd = 131.721
#pid_Kp: 21.527
#pid_Ki: 1.063
#pid_Kd: 108.982
min_temp: 0
max_temp: 280

max_extrude_only_distance: 200
max_extrude_cross_section: 50

#sensor_type:MAX31865
#sensor_pin: EBBCan: PA4
#spi_bus: spi1
#rtd_nominal_r: 100
#rtd_reference_r: 430
#rtd_num_of_wires: 2

[tmc2209 extruder]
uart_pin: EBBCan: PA15
interpolate: false
run_current: 0.50
sense_resistor: 0.110
stealthchop_threshold: 999999


# options here so you now only need to add supplementary ones like endstops!
#
#  However if you do decide to define your printer's extruder stepper here then valid config options are ONLY:
#    step_pin, dir_pin, enable_pin, rotation_distance, gear_ratio, microsteps, full_steps_per_rotation
#    pressure_advance, pressure_advance_smooth_time
#  Leave all other options in your [extruder] config
#
# REMOVE/MOVE THIS SECTION vvv
#[manual_extruder_stepper extruder]
#
# Uncomment the two lines below to enable the option for filament "touch" homing option to nozzle!
#extra_endstop_pins: tmc2209_extruder:virtual_endstop, TEST_PIN
#extra_endstop_names: mmu_ext_touch



# FILAMENT DRIVE GEAR STEPPER  ---------------------------------------------------------------------------------------------
# Note that 'mmu toolhead' endstop will automatically be added if a toolhead sensor is defined
#
# The default values are tested with the BOM NEMA14 motor. Please adapt these values to the motor you are using
# Example : for NEMA17 motors, you'll usually use higher current
#
[tmc2209 stepper_mmu_gear]
uart_pin: mmu:MMU_GEAR_UART
#uart_address: 0 			# Comment out for ERB board
interpolate: True
run_current: 0.5			# NEMA14 motor
hold_current: 0.1			# Can be small if not using touch homing or move (TMC stallguard)
sense_resistor: 0.110			# 0.15 for BTT TMC2226
stealthchop_threshold: 0		# Spreadcycle has more torque and better at speed
#
# Uncomment two lines below if you have TMC and want the ability to use filament "touch" homing with gear stepper
#diag_pin: ^mmu:MMU_GEAR_DIAG		# Set to MCU pin connected to TMC DIAG pin for gear stepper
#driver_SGTHRS: 60			# 255 is most sensitive value, 0 is least sensitive

[stepper_mmu_gear]
step_pin: mmu:MMU_GEAR_STEP
dir_pin: !mmu:MMU_GEAR_DIR
enable_pin: !mmu:MMU_GEAR_ENABLE
rotation_distance: 22.7316868		# Bondtech 5mm Drive Gears. Will be overriden by `mmu_gear_rotation_distance` in mmu_vars.cfg
gear_ratio: 80:20
microsteps: 16 				# Recommend 8 or 16. Try both to avoid Klipper 'Timer too close' error (also try adjusting num_moves)
full_steps_per_rotation: 200		# 200 for 1.8 degree, 400 for 0.9 degree
#
# Uncomment the two lines below to enable filament "touch" homing option with gear motor
#extra_endstop_pins: tmc2209_stepper_mmu_gear:virtual_endstop
#extra_endstop_names: mmu_gear_touch



# SELECTOR STEPPER  --------------------------------------------------------------------------------------------------------
#
[tmc2209 stepper_mmu_selector]
uart_pin: mmu:MMU_SEL_UART
#uart_address: 1 			# Comment out for ERB board
run_current: 0.4			# NEMA14 motor
hold_current: 0.2			# Can be small if not using touch homing or move (TMC stallguard)
interpolate: True
sense_resistor: 0.110
stealthchop_threshold: 100		# Stallguard homing (slower speeds) best done with stealthchop
#
# Uncomment two lines below if you have TMC and want to use selector "touch" movement and homing
diag_pin: ^mmu:MMU_SEL_DIAG 		# Set to MCU pin connected to TMC DIAG pin for selector stepper
driver_SGTHRS: 75			# 255 is most sensitive value, 0 is least sensitive

[stepper_mmu_selector]
step_pin: mmu:MMU_SEL_STEP
dir_pin: !mmu:MMU_SEL_DIR
enable_pin: !mmu:MMU_SEL_ENABLE
rotation_distance: 40
microsteps: 16 				# Don't need high fidelity
full_steps_per_rotation: 200		# 200 for 1.8 degree, 400 for 0.9 degree
endstop_pin: ^mmu:MMU_SEL_ENDSTOP	# Selector microswitch
endstop_name: mmu_sel_home
#
# Uncomment two lines below to give option of  selector "touch" movement and homing
#extra_endstop_pins: tmc2209_stepper_mmu_selector:virtual_endstop
#extra_endstop_names: mmu_sel_touch



# TOOLHEAD SENSOR  ---------------------------------------------------------------------------------------------------------
# Uncomment this section to enable toolhead sensor support. Only the switch pin should be defined; other normal
# filament_switch options are incompatible and will interfere with MMU operation. Note that this will automatically
# define "mmu_toolhead" endstop (homing point) for loading and unloading
#
# MMU Toolhead sensor START
[filament_switch_sensor toolhead_sensor]
switch_pin: EBBCan: PB6
# MMU Toolhead sensor END



# SELECTOR SERVO -----------------------------------------------------------------------------------------------------------
# Basic servo PWM setup. If these values are changed then the angles defined for different positions will also change
#
[mmu_servo mmu_servo]
pin: mmu:MMU_SERVO
maximum_servo_angle: 180
minimum_pulse_width: 0.00085
maximum_pulse_width: 0.00215



# ENCODER -----------------------------------------------------------------------------------------------------------------
# Encoder measures distance, monitors for runout and clogging and constantly calculates % flow rate
# Note that the encoder_resolution set if is purely a default to get started.  It is set through calibration
# and stored in mmu_vars.cfg
#
[mmu_encoder mmu_encoder]
encoder_pin: ^mmu:MMU_ENCODER		# EASY-BRD: ^PA6, Flytech ERB: ^gpio22
encoder_resolution: 1.0			# This is just a starter value. Overriden by `mmu_encoder_resolution` in mmm_vars.cfg
desired_headroom: 5.0			# The clog/runout headroom that MMU will attempt to maintain (closest MMU comes to triggering runout)
average_samples: 4			# The "damping" effect of last measurement. Higher value means clog_length will be reduced more slowly
flowrate_samples: 20			# How many "movements" on the encoder to measure over for flowrate calc

